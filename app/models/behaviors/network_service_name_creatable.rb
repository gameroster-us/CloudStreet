module Behaviors::NetworkServiceNameCreatable
	 def self.get_autogenerated_name(user, generic_type)
	  type = generic_type + "::AWS"
  	acc_tags = nil
    service_name_format_map = Service.get_naming_default_format_map(nil, self.adapter.account, nil, acc_tags)
    service_name_format_map[generic_type] = update_application_variables(service_name_format_map[generic_type], user)
    service_name_count_map  = get_last_used_name_per_type(self.adapter.account, acc_tags, service_name_format_map, generic_type)
    next_digit = service_name_count_map[type].to_i + 1
    name_structure = service_name_format_map[generic_type]
    name = name_structure.gsub('##',"#{'%02d'%next_digit}")
    CSLogger.info "----------#{self.class}-----naming convention name #{name}"
    name
  end

  def self.update_application_variables(service_name, user)
    valid_name_map = {
      "username" => user.username,
      "templatename" => '',
      "environmentname" => '',
      "templaterevision" => ''
    }

    regex_match = /\%(#{valid_name_map.keys.join('|')})\%/
    service_name = service_name.gsub!(regex_match) do |match|
        valid_name_map[match.delete('%')]
    end if service_name[/\%(#{valid_name_map.keys.join('|')})\%/]
    service_name
  end

  def self.get_last_used_name_per_type(account, provision_tags=nil, service_name_format_map=nil, generic_type)
    prefix_service_names = service_name_format_map.nil? ? account.get_prefix_service_names_by_type(provision_tags) : service_name_format_map
    network_map = { "SecurityGroups::AWS" => "Services::Network::SecurityGroup", "Subnets::AWS" => "Services::Network::Subnet" }
    @memo = {"Services::Network::SecurityGroup::AWS"=>0, "Services::Network::Subnet::AWS"=>0}
    generic_type.split('::').last.constantize.where(account_id: account.id).where(state: 'available').inject(@memo) do |memo, s|
      if s.data && s.data['name_free_text']
        length = (s.data['name_free_text'].length + 1)* -1
        name = s.name.slice(0..length)
      else
        name = s.name
      end
      parsed_name = prefix_service_names[network_map[s.type]].is_a?(String) ? /\A(#{(Regexp.quote prefix_service_names[network_map[s.type]]).gsub('\\#\\#', '([\d]+)')})\z/ : prefix_service_names[network_map[s.type]]
      next(memo) unless name =~ parsed_name

      digit = $2.to_i.nil? ? 0 : $2.to_i
      memo[network_map[s.type] + '::AWS'] = digit if digit > memo[network_map[s.type] + '::AWS']#get the last largest digit
      memo
    end
    @memo
  end
end
